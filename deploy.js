const ethers = require("ethers");
// fs is used for file read/write
const fs = require("fs-extra");
require("dotenv").config();

async function main() {
	const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);

	// unsecure way of passing PRIVATE_KEY
	const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
	const encryptedJson = fs.readFileSync("./encryptedKey.json", "utf8");
	// we declare it as wallet instead of const now because the step is a bit different than before, as it doesn't link the provider;
	// we need to do this in two steps (first step being create wallet from encrypted json, second being wallet.connect(provider))
	// as we deleted PRIVATE_KEY_PASSWORD from .env, we need to pass it in the terminal when we run the js script (PRIVATE_KEY_PASSWORD = <your_password> node <your_js_file>)
	/* let wallet = new ethers.Wallet.fromEncryptedJsonSync(
		encryptedJson,
		process.env.PRIVATE_KEY_PASSWORD
	);
	wallet = await wallet.connect(provider); */

	const contract = await deployContract(wallet);
	//await manuallyCreateAContract(wallet);

	const currentFavoriteNumber = await contract.retrieve();
	console.log(`Current Favorite Number: ${currentFavoriteNumber.toString()}`);

	const transactionResponse = await contract.store("7");
	const transactionReceipt = await transactionResponse.wait(1);
	const updateFavoriteNumber = await contract.retrieve();

	console.log(`Updated Favorite Number: ${updateFavoriteNumber.toString()}`);
}

async function deployContract(wallet) {
	const abi = fs.readFileSync(
		"./SimpleStorage_sol_SimpleStorage.abi",
		"utf8"
	);
	const binary = fs.readFileSync(
		"./SimpleStorage_sol_SimpleStorage.bin",
		"utf8"
	);
	const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
	console.log("Deploying, please wait...");
	// await tells the code to stop here and wait for the contract to deploy
	// deploy can take arguments like gasPrice, gasLimit, etc (see documentation)
	const contract = await contractFactory.deploy(/* { gasPrice: 10000000 } */);

	// this waits for x blocks (.wait(x)) to finish; in our case, there will be only one block, the one that deploys the app, so putting wait(2) will cause an infinite wait,...
	// ...unless of course there will be other blocks running (which would be the case in a real case environment)
	// this apparently helps with making sure the deploy block is added to the chain and actually gets deployed
	// the value of x is arbitrary, but probably more is better (higher chance to get added to chain), but takes more time
	const transactionReceipt = await contract.deployTransaction.wait(1);
	// log contract address so we can search it on etherscan
	console.log(`Contract Address: ${contract.address}`);
	//console.log("Here is the deployment transaction (response): ");
	// this is what you get when you create a transaction (response)
	//console.log(contract.deployTransaction);
	//console.log("Here is the transaction receipt: ");
	// transaction receipts are only obtainable when you .wait()
	//console.log(transactionReceipt);

	return contract;
}

async function manuallyCreateAContract(wallet) {
	console.log("Let's deploy with only transaction data!");
	// this gets the nonce which is basically the transaction count of the wallet
	const nonce = await wallet.getTransactionCount();
	// when creating a transaction manually like this, we can deploy a contract and check its transaction response (contract.deployTransaction) for the signature
	const tx = {
		nonce: nonce, // kind of an id of the transaction; gets incremented with every transaction made by the private address
		gasPrice: 20000000000,
		gasLimit: 1000000,
		to: null,
		value: 0, // number of eth we send
		// data is the binary in SimpleStorage_sol_SimpleStorage.bin, preceded by a "0x"
		data: "0x60806040526040518060400160405280600281526020016040518060400160405280600781526020017f5061747269636b000000000000000000000000000000000000000000000000008152508152506001600082015181600001556020820151816001019080519060200190610077929190610102565b5050506040518060400160405280600281526020016040518060400160405280600381526020017f617364000000000000000000000000000000000000000000000000000000000081525081525060036000820151816000015560208201518160010190805190602001906100ed929190610102565b5050503480156100fc57600080fd5b50610206565b82805461010e906101a5565b90600052602060002090601f0160209004810192826101305760008555610177565b82601f1061014957805160ff1916838001178555610177565b82800160010185558215610177579182015b8281111561017657825182559160200191906001019061015b565b5b5090506101849190610188565b5090565b5b808211156101a1576000816000905550600101610189565b5090565b600060028204905060018216806101bd57607f821691505b602082108114156101d1576101d06101d7565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b610a7f80620002166000396000f3fe608060405234801561001057600080fd5b506004361061009d5760003560e01c80636f760f41116100665780636f760f4114610137578063771602f71461015357806377ec2b55146101835780638bab8dd5146101a25780639e7a13ad146101d25761009d565b806273b0ba146100a25780632e64cec1146100c0578063471f7cdf146100de5780636057361d146100fc57806366993d6614610118575b600080fd5b6100aa610203565b6040516100b791906107b3565b60405180910390f35b6100c861020c565b6040516100d591906107b3565b60405180910390f35b6100e6610215565b6040516100f391906107b3565b60405180910390f35b610116600480360381019061011191906106b6565b61021b565b005b610120610225565b60405161012e9291906107ce565b60405180910390f35b610151600480360381019061014c919061065a565b6102bf565b005b61016d600480360381019061016891906106e3565b61034f565b60405161017a91906107b3565b60405180910390f35b61018b610365565b6040516101999291906107ce565b60405180910390f35b6101bc60048036038101906101b79190610611565b6103ff565b6040516101c991906107b3565b60405180910390f35b6101ec60048036038101906101e791906106b6565b61042d565b6040516101fa9291906107ce565b60405180910390f35b60006003905090565b60008054905090565b60005481565b8060008190555050565b600380600001549080600101805461023c9061091d565b80601f01602080910402602001604051908101604052809291908181526020018280546102689061091d565b80156102b55780601f1061028a576101008083540402835291602001916102b5565b820191906000526020600020905b81548152906001019060200180831161029857829003601f168201915b5050505050905082565b600660405180604001604052808381526020018481525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906103259291906104e9565b50505080600583604051610339919061079c565b9081526020016040518091039020819055505050565b6000818361035d919061087b565b905092915050565b600180600001549080600101805461037c9061091d565b80601f01602080910402602001604051908101604052809291908181526020018280546103a89061091d565b80156103f55780601f106103ca576101008083540402835291602001916103f5565b820191906000526020600020905b8154815290600101906020018083116103d857829003601f168201915b5050505050905082565b6005818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6006818154811061043d57600080fd5b90600052602060002090600202016000915090508060000154908060010180546104669061091d565b80601f01602080910402602001604051908101604052809291908181526020018280546104929061091d565b80156104df5780601f106104b4576101008083540402835291602001916104df565b820191906000526020600020905b8154815290600101906020018083116104c257829003601f168201915b5050505050905082565b8280546104f59061091d565b90600052602060002090601f016020900481019282610517576000855561055e565b82601f1061053057805160ff191683800117855561055e565b8280016001018555821561055e579182015b8281111561055d578251825591602001919060010190610542565b5b50905061056b919061056f565b5090565b5b80821115610588576000816000905550600101610570565b5090565b600061059f61059a84610823565b6107fe565b9050828152602081018484840111156105bb576105ba610a12565b5b6105c68482856108db565b509392505050565b600082601f8301126105e3576105e2610a0d565b5b81356105f384826020860161058c565b91505092915050565b60008135905061060b81610a32565b92915050565b60006020828403121561062757610626610a1c565b5b600082013567ffffffffffffffff81111561064557610644610a17565b5b610651848285016105ce565b91505092915050565b6000806040838503121561067157610670610a1c565b5b600083013567ffffffffffffffff81111561068f5761068e610a17565b5b61069b858286016105ce565b92505060206106ac858286016105fc565b9150509250929050565b6000602082840312156106cc576106cb610a1c565b5b60006106da848285016105fc565b91505092915050565b600080604083850312156106fa576106f9610a1c565b5b6000610708858286016105fc565b9250506020610719858286016105fc565b9150509250929050565b600061072e82610854565b610738818561085f565b93506107488185602086016108ea565b61075181610a21565b840191505092915050565b600061076782610854565b6107718185610870565b93506107818185602086016108ea565b80840191505092915050565b610796816108d1565b82525050565b60006107a8828461075c565b915081905092915050565b60006020820190506107c8600083018461078d565b92915050565b60006040820190506107e3600083018561078d565b81810360208301526107f58184610723565b90509392505050565b6000610808610819565b9050610814828261094f565b919050565b6000604051905090565b600067ffffffffffffffff82111561083e5761083d6109de565b5b61084782610a21565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610886826108d1565b9150610891836108d1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156108c6576108c5610980565b5b828201905092915050565b6000819050919050565b82818337600083830152505050565b60005b838110156109085780820151818401526020810190506108ed565b83811115610917576000848401525b50505050565b6000600282049050600182168061093557607f821691505b60208210811415610949576109486109af565b5b50919050565b61095882610a21565b810181811067ffffffffffffffff82111715610977576109766109de565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610a3b816108d1565b8114610a4657600080fd5b5056fea2646970667358221220631029c44e67207fab172f96a000cb0cd0408d2d92806ad2bc5eafd2b1a1594764736f6c63430008070033",
		chainId: 1337, // we can get this by going to metamask and checking the Chain id of a certain network (Settings -> Networks). ex: Etherium Mainnet has chainId 1; this is a unique identifier
		// for Ganache, the chainId is the Network Id near RPC Server, on the top
	};
	// a signed transaction is not the same as a sent transaction; sendTransaction() actually calls signTransaction(); signTransaction() does not send the transaction so it cannot be used to deploy by itself
	//const signedTxResponse = await wallet.signTransaction(tx);
	//console.log(signedTxResponse);
	const sentTxResponse = await wallet.sendTransaction(tx);
	await sentTxResponse.wait(1);
	console.log(sentTxResponse);
}

main()
	.then(() => process.exit(0))
	.catch((error) => {
		console.error(error);
		process.exit(1);
	});
